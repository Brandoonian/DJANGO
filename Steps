STARTING WITH PART 2 OF TECH WITH TIM VIDEO:

- Added 'main' as an app to the INSTALLED APPS section in setting.py. Typed "'main.apps.MainConfig'"
- Went to /mysite/ and entered the command 'python manage.py migrate' to make necessary changes to the project
- Defined some models for the database. Created a to do list class and a class for the items on that to to list.
- In /mysite/ entered the command 'python manage.py makemigrations'. This is like adding something to staging in Git
- Again, entered the command 'python manage.py migrate' to make necessary changes
- In /mysite/ entered the command 'python .\manage.py shell' which allows us to add some things to database.
- With the command 'from main.models import Item, ToDoList', we import our models so we can use them to create objects and store them in the database.
- Created to do list OBJECT with the line 't = ToDoList(name="Tim\'s List")'.
    - Saved to database with line t.save()
    - To query all objects in database, we can enter 'ToDoList.objects.all()'.
    - To query first object, we can search by ID with line 'ToDoList.objects.get(id=1)'.
    - To query by name, we can enter line 'ToDoList.objects.get(name=Tim's List)'
- Because 'Items' are related to 'ToDoList', there's a special way to create them within our to do list.
    - To do this we enter line 't.item_set.create(text="Go to mall", complete=False)'
        - To To query first item, we can search by ID with line 't.item_set.get(id=1)'.
- We erased view one in views.py and erased the path in main\urls.py.
- We enter '<int:id>' to the first path to search for integer in our path and pass it to the function 'views.index'
ADMIN DASHBOARD
- In 'C:\Users\12692\PycharmProjects\DJANGO\mysite>' we enter command 'python manage.py shell'.
- We import the models: 'from main.models import Item, ToDoList'
- In next line, we define 't = ToDoList.objects' to make it easier to get objects.
- 't.all()' = get all objects
- 't.get(id=1)' = get the first object
- 't.filter(name__startswith="Tim")' = get the object that starts with "Tim".
- To delete an object:
    - define it I.E. 'del_object = t.get(id=1)'
    - 'del_object.delete()' = delete object that was defined above.
- To create admin, type command 'python manage.py createsuperuser'.
    - Login info for this project:
        - Username: Tim
        - Email: tim@techwithtim.net
        - Password: 123456789
TEMPLATES AND HTML
- In 'main\urls.py', we create a new path for the homepage.
    - path("", views.home, name="home")
- In 'views.py', we create a new function and leave it blank for now.
    - def home(response):
        pass
- To make template, we first create two new folders.
    - A new folder inside of 'main' called 'templates'.
        - A new folder inside 'templates' called 'main'.
            - Tim explains that it is necessary to have a folder with the same name as the application to load the templates.
- Inside of 'templates\main' folder, we make two html files:
    - 'base.html' which is a template to serve as the standard layout of all webpages.
    - 'home.html' which is a template to serve as the homepage and can inherit the base template.
- In the 'index' method of 'views.py' we replace the 'HttpResponse' with 'render(response, "main/base.html", {})'
    - 'response,' = first parameter in the method.
    - '"main/base.html",' = template location.
    - '{} = open dictionary'
- We copy and paste into 'home' method and then change template location to '"main/home.html"'.
SIMPLE FORMS
- We create a new path in 'main/urls.py' for a page that will have a form that will allow us to make a todo list.
- We create a new function in 'views.py' called 'create'.
- We design the webpage with an HTML file called 'create.html'.
    - We create a form using HTML.
- We make a new file in the 'main' directory of our application called "forms.py".
    - We create a class that will define the attributes in the fields in our form.
- In 'view.py', we pass '{"form":form}' as the last argument in the 'render' call of the 'create' function.
- We create an instance of the form 'class CreateNewList(forms.Form)' in the 'create' function and pass it to 'create.html'.
- In 'create.html', we can modify the layout of the webpage by adding to the 'form' variable:
    - '{{form.as_table}}' = default/table
    - '{{form.as_p}}' = all items will list vertically
    - '{{form.as_ul}}' = bulleted list
- To make checkbox optional, we enter the argument 'required=False' into the 'BooleanField' of 'CreateNewList' class.
-